package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.student;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "STUDENT".
 */
public class studentDao extends AbstractDao<student, Void> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Point = new Property(1, int.class, "point", false, "POINT");
        public final static Property Kinds = new Property(2, String.class, "kinds", false, "KINDS");
    }
    public studentDao(DaoConfig config) {
        super(config);
    }

    public studentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT\" (" + //
                "\"NAME\" TEXT NOT NULL UNIQUE ," + // 0: name
                "\"POINT\" INTEGER NOT NULL ," + // 1: point
                "\"KINDS\" TEXT NOT NULL );"); // 2: kinds
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, student entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getName());
        stmt.bindLong(2, entity.getPoint());
        stmt.bindString(3, entity.getKinds());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public student readEntity(Cursor cursor, int offset) {
        student entity = new student( //
                cursor.getString(offset + 0), // name
                cursor.getInt(offset + 1), // point
                cursor.getString(offset + 2) // kinds
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, student entity, int offset) {
        entity.setName(cursor.getString(offset + 0));
        entity.setPoint(cursor.getInt(offset + 1));
        entity.setKinds(cursor.getString(offset + 2));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(student entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(student entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Subject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */

}
